name: 🚀 每日构建

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      SKIP_CASE_MARK:
        description: "case mark to skip ('none' means skip no cases)"
        required: false
        # default: "app douyin"
        default: "none"

# NOTICE: env 上下文只能在 run 步骤中使用
env:
  BASE_PATH: mypy
  APP_BASE_PATH: mypy/apps

jobs:
  ###########################################
  # 语法检查
  ###########################################
  syntax_check:
    # 一次性全部检查
    uses: M-Kepler/Python/.github/workflows/syntax_check.yml@master
    with:
      APP_PATH: mypy

  ###########################################
  # 单元测试 和 代码覆盖率报告
  ###########################################
  unittest_and_coverage:
    name: Unittest
    needs:
      - syntax_check

    uses: M-Kepler/Python/.github/workflows/unittest.yml@master
    # 要在 with 子句中传递环境变量，您应该使用 secrets 或 inputs
    with:
      CASE_PATH: mypy/tests
      # 依赖的二进制文件
      DEPENDENT_BINARY: "ffmpeg unoconv libreoffice poppler-utils"
      NOT_RUN_MARK: ${{ inputs.SKIP_CASE_MARK }}
    secrets:
      ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}

  ###########################################
  # 获取某个目录下的所有文件夹并将它们作为变量使用
  # OK
  ###########################################
  # get_apps:
  #   runs-on: ubuntu-latest
  #   # 设置输出，可在多个作业间传递参数
  #   outputs:
  #     apps: ${{ steps.set-matrix.outputs.apps }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Find directories and set as output
  #       id: set-matrix
  #       run: |
  #         apps=$(bash ${{ env.BASE_PATH }}/build/get_apps.sh ${{ env.APP_BASE_PATH }})
  #         echo "found apps: $apps"
  #         # key=value 格式
  #         echo "apps=[$apps]" >> $GITHUB_OUTPUT
  #         echo "base_path=${{ env.BASE_PATH }}" >> $GITHUB_OUTPUT
  #
  # ###########################################
  # # 打包 OK
  # ###########################################
  # # 没必要一个个设置环境再打包
  # package:
  #   needs:
  #     - syntax_check
  #     - get_apps
  #     - unittest_and_coverage
  #   uses: M-Kepler/Python/.github/workflows/package.yml@master
  #
  #   # 使用前面的 job 的输出
  #   strategy:
  #     matrix:
  #       apps: ${{ fromJSON(needs.get_apps.outputs.apps) }}
  #   with:
  #     APPS_PATH: mypy/apps
