name: 🚚 运行应用

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      APP:
        description: "mypy/apps 下的应用名称"
        required: true
        type: string
        default: "test_app"
      ARGS:
        description: "应用参数"
        type: string
        required: false
      DEPENDENT_BINARY:
        description: "依赖的二进制程序"
        type: string
        required: false
        default: "ffmpeg unoconv libreoffice poppler-utils"
      SIMPLE_RUN:
        description: "是否简单运行（不安装程序依赖和字体）"
        type: boolean
        required: false
        default: true
      COMMIT_CHANGE:
        description: "是否提交更改"
        type: boolean
        required: false
        default: true

  # 流水线调用
  workflow_call:
    inputs:
      APP:
        description: "mypy/apps 下的应用名称"
        required: true
        type: string
      ARGS:
        description: "应用参数"
        type: string
        required: false
      SIMPLE_RUN:
        description: "是否安装程序依赖和字体"
        type: boolean
        required: false
        default: false
      DEPENDENT_BINARY:
        description: "依赖的二进制程序"
        type: string
        required: false
        default: "ffmpeg unoconv libreoffice poppler-utils"
      FORCE_COMMIT:
        description: "不管是否运行成功，都提交改动的信息"
        type: boolean
        required: false
        default: false
      COMMIT_CHANGE:
        description: "是否提交更改"
        type: boolean
        required: false
        default: true

    # 外部调用的时候提供 token 用来拉取本私有仓库
    secrets:
      MYPY_ACCESS_TOKEN:
        required: false

# env 上下文只能在 run 步骤中使用
env:
  APP_BASE_PATH: mypy/apps
  APP_ENTRY: main.py
  FONT_DIR: mypy/assets/font
  ENV_INIT_SCRIPT: mypy/env_init.sh

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: 查看运行参数
        run: |
          echo "::notice::运行参数:"
          echo "::notice:: ${{ github.event.inputs.ARGS }}"
          echo ""

      - name: Checkout
        # uses 之后不能再用 run
        uses: actions/checkout@v4
        # 访问仓库用到的 Personal access token
        env:
          MYPY_ACCESS_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          token: ${{ env.MYPY_ACCESS_TOKEN }}
          repository: M-Kepler/Python

      - name: 设置时区
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: 安装依赖程序
        uses: ConorMacBride/install-package@v1.1.0
        if: ${{ ! inputs.SIMPLE_RUN }}
        with:
          apt: ${{ inputs.DEPENDENT_BINARY }}

      - name: 安装字体
        if: ${{ ! inputs.SIMPLE_RUN }}
        run: |
          bash mypy/build/install_font.sh ${{ env.FONT_DIR }}

      - name: 初始化运行环境
        run: |
          bash ${{ env.ENV_INIT_SCRIPT }}

      - name: 🔴🟡🟢 运行 🟢🟡🔴
        run: |
          cd ${{ env.APP_BASE_PATH }}/${{ inputs.APP }}
          if [ ! -z "${{ inputs.ARGS }}" ]; then
              python ${{ env.APP_ENTRY }} ${{ inputs.ARGS }}
          else
              python ${{ env.APP_ENTRY }}
          fi

      - name: 保存运行过程修改的配置
        if: ${{ (success() && inputs.COMMIT_CHANGE) || inputs.FORCE_COMMIT }} # 这一步只会在前一步成功时执行
        env:
          # 这个 token 不需要配置，默认自带的
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github_action"
          # 为了让 `**` 在Git命令中递归地工作，需要在你的Git配置中设置 core.globstar 为true
          git config --global core.globstar true

          echo "-----> 拉取最新代码 <-----"
          git status
          git pull

          echo "-----> 提交改动 <-----"
          # 添加所有的配置文件改动
          git add **/*.ini
          git add **/*.json
          # 无改动不报错
          git diff --cached --exit-code || git commit -m "[UPD][${{ inputs.APP }}]: commit githubaction change"
          git push origin master
