# https://zhuanlan.zhihu.com/p/387389708?utm_id=0
# https://github.com/marketplace/actions/debugging-with-tmate
# https://github.com/marketplace/actions/debugging-with-ssh

name: 00. 🍉 ssh_keep_alive

on:
  workflow_dispatch:
    inputs:
      SYSTEM:
        type: choice
        description: "系统"
        required: false
        default: ubuntu-latest
        options:
          - windows-latest
          - ubuntu-latest

      FREE_DISK:
        type: boolean
        description: "释放磁盘空间"
        required: false
        default: false

  # # 定时执行
  # schedule:
  #   # 代表国际标准时间，实际北京时间需要 +8 小时
  #   - cron: "30 01 * * *"
  #   - cron: "30 07 * * *"

  # 该事件可以通过 API 触发
  repository_dispatch:
    types:
      - ssh_keep_alive

env:
  FONT_DIR: mypy/assets/font
  ENV_INIT_SCRIPT: mypy/env_init.sh
  DEPENDENT_BINARY: "ffmpeg libreoffice poppler-utils"
  PYTHON_VERSION: 3.9

jobs:
  new_ssh_keep_connect:
    # NOTICE: 注意这里要用单引号
    runs-on: ${{ inputs.SYSTEM || 'ubuntu-latest' }}
    steps:
      - name: 释放磁盘空间
        # runner.os == 'Linux' / 'Windows' 要用单引号
        if: ${{ inputs.FREE_DISK && runner.os == 'Linux' }}
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: 清理磁盘
        if: ${{ inputs.FREE_DISK && runner.os == 'Linux' }}
        continue-on-error: true # 即使失败了也继续后续流程
        run: |
          echo "================================="
          echo "-----> 磁盘清理前 <-----"
          df -h
          echo "================================="

          docker rmi `docker images -q` > /dev/null 2>&1 || true
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php > /dev/null 2>&1
          sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* > /dev/null 2>&1 || true
          sudo -E apt-get -qq update > /dev/null 2>&1
          sudo -E apt-get -qq autoremove --purge > /dev/null 2>&1
          sudo -E apt-get -qq clean > /dev/null 2>&1

          # sudo find /opt/hostedtoolcache/* -maxdepth 1 -type d ! -name "Python" -exec rm -rf {} \; > /dev/null 2>&1
          # sudo -rf /usr/local/.ghcup > /dev/null 2>&1
          sudo rm -rf /opt/hostedtoolcache/CodeQL > /dev/null 2>&1
          sudo rm -rf /usr/share/swift > /dev/null 2>&1

          echo "================================="
          echo "-----> 磁盘清理后 <-----"
          df -h
          echo "================================="

      - name: 设置时区
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: "github.com" # ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)

      - name: 配置 git 账号
        run: |
          git config --global user.name "actions-user"
          git config --global user.email "actions-user@github.com"
          git config --global --list

      - name: 设置运行环境配置
        continue-on-error: true
        run: |
          git clone git@github.com:M-Kepler/dotfiles ~/dotfiles
          # pip 换了源反而更慢了
          # cd ~/dotfiles
          # export MSYSTEM=1
          # bash run.sh
          # sed -i '1i export MSYSTEM=1' ~/.bashrc

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 安装依赖程序
        continue-on-error: true
        uses: ConorMacBride/install-package@v1.1.0
        with:
          apt: ${{ env.DEPENDENT_BINARY }}
          choco: ${{ env.DEPENDENT_BINARY }}

      - name: 拉取 M-Kepler/Python
        uses: actions/checkout@v4
        env:
          MYPY_ACCESS_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          token: ${{ env.MYPY_ACCESS_TOKEN }}
          repository: M-Kepler/Python

      - name: 安装字体
        if: ${{ runner.os == 'Linux' }}
        run: |
          bash mypy/build/install_font.sh ${{ env.FONT_DIR }}

      - name: 初始化运行环境
        run: |
          bash ${{ env.ENV_INIT_SCRIPT }}
        # windows 版支持用 gitbash 执行命令
        shell: bash

      # 在流水线执行脚本创建的文件夹都是 root 权限，而通过 action-debug 进入环境时 docker:runner 权限
      # 会导致无法操作这些文件或目录
      - name: 安装第三方服务
        if: ${{ runner.os == 'Linux' }}
        continue-on-error: true
        run: |
          bash mypy/3party/init.sh

      - name: 创建软链
        continue-on-error: true
        run: |
          ln -s $GITHUB_WORKSPACE ~/my

          # 创建个脚本，继续执行后续流水线
          echo "touch $GITHUB_WORKSPACE/continue" > ~/quit_ssh
          chmod a+x ~/quit_ssh

      ##################################################
      # https://stackoverflow.com/questions/75578151/how-do-i-clone-a-repo-in-b-repo-github-actions-if-two-repo-is-in-same-organizati
      # NOTICE: 也可以手动在 github actions 里拉取，不过要用 https 协议，而且提交的时候需要进行账密认证
      # 而通过以下方式这不需要账密认证

      # - uses: fawazahmed0/action-debug@main
      - uses: wordsworth-mk/action-debug@main
        with:
          credentials: "user:password"
